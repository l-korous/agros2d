# Set project's name
PROJECT( agros2d )
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

# Debug yes / no.
# Not used so far.
SET(AGROS_DEBUG NO)

# versions
SET(VERSION_MAJOR 3)
SET(VERSION_MINOR 0)
SET(VERSION_SUB 0)
SET(VERSION_GIT 4214)
SET(VERSION_YEAR 2013)
SET(VERSION_MONTH 7)
SET(VERSION_DAY 13)

# Naming of projects built.
SET(AGROS_UTIL agros2d_util)
SET(PYTHONLAB_LIBRARY agros2d_pythonlab_library)
SET(PYTHONLAB_BINARY agros2d_pythonlab_binary)
SET(AGROS_LIBRARY agros2d_library)
SET(AGROS_SOLVER agros2d_solver)
SET(AGROS_GENERATOR agros2d_generator)
SET(AGROS_BINARY agros2d_binary)
SET(PARALUTION_LIBRARY agros2d_3dparty_paralution)
SET(BSON_LIBRARY agros2d_3dparty_bson)
SET(CTEMPLATE_LIBRARY agros2d_3dparty_ctemplate)
SET(DXFLIB_LIBRARY agros2d_3dparty_dxflib)
SET(POLY2TRI_LIBRARY agros2d_3dparty_poly2tri)
SET(QCUSTOMPLOT_LIBRARY agros2d_3dparty_qcustomplot)
SET(QUAZIP_LIBRARY agros2d_3dparty_quazip)
SET(STB_TRUETYPE_LIBRARY agros2d_3dparty_stb_truetype)

# Add QT.
SET(QT_USE_QTOPENGL TRUE)
SET(QT_USE_QTUITOOLS TRUE)
SET(QT_USE_QTNETWORK TRUE)
SET(QT_USE_QTOPENGL TRUE)
SET(QT_USE_QTSQL TRUE)
SET(QT_USE_QTXML TRUE)
SET(QT_USE_QTSVG TRUE)
SET(QT_USE_QTTEST TRUE)
SET(QT_USE_QTDBUS TRUE)
SET(QT_USE_QTSCRIPT TRUE)
SET(QT_USE_QTWEBKIT TRUE)
SET(QT_USE_QTXMLPATTERNS TRUE)
SET(QT_USE_PHONON TRUE)
find_package(Qt4 REQUIRED)
# This has to be here, otherwise CMake will not do the magic and will not link to OpenGL
find_package(OpenGL REQUIRED)
INCLUDE(${QT_USE_FILE})
ADD_DEFINITIONS(${QT_DEFINITIONS})

# Set global compiler parameters.
find_package(OpenMP REQUIRED)
IF(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
  INCLUDE_DIRECTORIES(/usr/include/google)
  IF(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
  INCLUDE_DIRECTORIES(omp)
  ENDIF(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")

  INCLUDE_DIRECTORIES(/usr/include)
  INCLUDE_DIRECTORIES(/usr/include/python2.7)
  
  EXECUTE_PROCESS(COMMAND "python" "-c" "import distutils.sysconfig; print distutils.sysconfig.get_config_var('LOCALMODLIBS')" OUTPUT_VARIABLE PYTHON_MODLIBS)
  EXECUTE_PROCESS(COMMAND "python" "-c" "from distutils import sysconfig; print '-lpython'+sysconfig.get_config_var('VERSION')" OUTPUT_VARIABLE PYTHON_LIB)
  STRING(STRIP ${PYTHON_MODLIBS} PYTHON_MODLIBS)
  STRING(STRIP ${PYTHON_LIB} PYTHON_LIB)
  SET(CMAKE_SHARED_LINKING_FLAGS "${CMAKE_SHARED_LINKING_FLAGS} ${PYTHON_MODLIBS} ${PYTHON_LIB}")
  SET(CMAKE_MODULE_LINKING_FLAGS "${CMAKE_MODULE_LINKING_FLAGS} ${PYTHON_MODLIBS} ${PYTHON_LIB}")
  SET(CMAKE_EXE_LINKING_FLAGS "${CMAKE_EXE_LINKING_FLAGS} ${PYTHON_MODLIBS} ${PYTHON_LIB}")
ENDIF()

IF(MSVC)
  INCLUDE_DIRECTORIES(c:/hpfem/hermes/dependencies/include)
  INCLUDE_DIRECTORIES(d:/hpfem/hermes/dependencies/include)
  INCLUDE_DIRECTORIES(c:/Python27/include)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP /openmp /Zc:wchar_t")
  SET(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} /NODEFAULTLIB:libcmtd /NODEFAULTLIB:libcmt")
ENDIF(MSVC)

# Create file with preprocessor definitions exposing the build settings to the source code.
configure_file(
  util/config.h.cmake
  util/config.h
)

# Include OUR header files location
include(IncludeSubdirs.cmake)

# Subdirectories.
ADD_SUBDIRECTORY(3rdparty)
# Also looks for Xerces, UMFPACK, etc.
ADD_SUBDIRECTORY(hermes)
# Include those
#INCLUDE_DIRECTORIES(${XSD_INCLUDE_DIR})
#INCLUDE_DIRECTORIES(${XERCES_INCLUDE_DIR})
#INCLUDE_DIRECTORIES(${TCMALLOC_INCLUDE_DIR})
#INCLUDE_DIRECTORIES(${BSON_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${UMFPACK_INCLUDE_DIR})

ADD_SUBDIRECTORY(util)
ADD_SUBDIRECTORY(pythonlab-library)
ADD_SUBDIRECTORY(pythonlab-binary)
ADD_SUBDIRECTORY(agros2d-library)
ADD_SUBDIRECTORY(agros2d-binary)
#ADD_SUBDIRECTORY(agros2d-solver)
ADD_SUBDIRECTORY(agros2d-generator)
#ADD_SUBDIRECTORY(agros2d-remote)
#ADD_SUBDIRECTORY(agros2d-forms)

# Installation
SET(PREFIX /usr/local)
SET(SCRIPT_EXAMPLES_INSTALL_PATH ${PREFIX}/share/agros2d/data/script)
FILE(GLOB SCRIPT_EXAMPLES_FILES "data/script/*.py")

SET(RESOURCES_INSTALL_PATH ${PREFIX}/share/agros2d/resources)
FILE(GLOB RESOURCES_FILES "resources/*")

# ???
# SET(RESOURCES_PYTHON_INSTALL_PATH ${PREFIX}/share/agros2d)
# FILE(GLOB RESOURCES_PYTHON_FILES "*.py")

# ???
# SET(PYTHON_STARTUP_INSTALL_PATH ${PREFIX}/share/agros2d)
# FILE(GLOB PYTHON_STARTUP_FILES "*.py")

SET(PIXMAP_INSTALL_PATH ${PREFIX}/share/pixmaps)
FILE(GLOB PIXMAP_FILES "resources/images/agros2d.xpm")

SET(DESKTOP_INSTALL_PATH ${PREFIX}/share/applications)
FILE(GLOB DESKTOP_FILES "agros2d.desktop")

SET(LIB_INSTALL_PATH ${PREFIX}/lib)
FILE(GLOB LIB_FILES "libs/*")

SET(BINARY_INSTALL_PATH ${PREFIX}/bin)
IF(WIN32)
  FILE(GLOB BINARY_FILES "agros2d.exe")
ELSE(WIN32)
  FILE(GLOB BINARY_FILES "agros2d")
ENDIF(WIN32)

SET(SOLVER_INSTALL_PATH ${PREFIX}/bin)
IF(WIN32)
  FILE(GLOB SOLVER_FILES "agros2d_solver.exe")
ELSE(WIN32)
  FILE(GLOB SOLVER_FILES "agros2d_solver")
ENDIF(WIN32)

SET(PYTHONLAB_INSTALL_PATH ${PREFIX}/bin)
IF(WIN32)
  FILE(GLOB PYTHONLAB_FILES "agros_pythonlab.exe")
ELSE(WIN32)
  FILE(GLOB PYTHONLAB_FILES "agros_pythonlab")
ENDIF(WIN32)

# INSTALL(FILES ${SCRIPT_EXAMPLES_FILES} DESTINATION ${SCRIPT_EXAMPLES})
# INSTALL(FILES ${RESOURCES_FILES} DESTINATION ${RESOURCES_INSTALL_PATH})
# INSTALL(FILES ${PIXMAP_FILES} DESTINATION ${PIXMAP_INSTALL_PATH})
# INSTALL(FILES ${DESKTOP_FILES} DESTINATION ${DESKTOP_INSTALL_PATH})
# INSTALL(FILES ${LIB_FILES} DESTINATION ${LIB_INSTALL_PATH})
# INSTALL(FILES ${BINARY_FILES} DESTINATION ${BINARY_INSTALL_PATH})
# INSTALL(FILES ${SOLVER_FILES} DESTINATION ${SOLVER_INSTALL_PATH})
# INSTALL(FILES ${PYTHONLAB_FILES} DESTINATION ${PYTHONLAB_INSTALL_PATH})
# INSTALL(FILES ${BINARY_FILES} DESTINATION ${BINARY_INSTALL_PATH})
